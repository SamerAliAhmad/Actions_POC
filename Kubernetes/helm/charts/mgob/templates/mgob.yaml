apiVersion: v1
kind: Secret
metadata:
  name: mgob-secrets
  namespace: {{ .Values.global.namespace }}
  labels:
    chartVersion: {{ .Chart.Version }}
type: Opaque
data:
  smtp_password: {{ .Values.secrets.smtpPassword }}
  smtp_username: {{ .Values.secrets.smtpUsername }}
  aws_access_key: {{ .Values.secrets.awsAccessKey }}
  aws_secret_key: {{ .Values.secrets.awsSecretKey }}
  mongodb_username: {{ .Values.secrets.mongodbUsername }}
  mongodb_password: {{ .Values.secrets.mongodbPassword }}
  env_name: {{ .Values.secrets.envName }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mgob-gstore-config
  namespace: {{ .Values.global.namespace }}
  labels:
    chartVersion: {{ .Chart.Version }}
    role: mongo-backup
data:
  {{ .Values.logsDatabase.name }}.yml: |
    target:
      host: "{{ .Release.Name }}-mongodb-0.{{ .Release.Name }}-mongodb-headless.{{ .Values.global.namespace }}.svc.cluster.local,{{ .Release.Name }}-mongodb-1.{{ .Release.Name }}-mongodb-headless.{{ .Values.global.namespace }}.svc.cluster.local,{{ .Release.Name }}-mongodb-2.{{ .Release.Name }}-mongodb-headless.{{ .Values.global.namespace }}.svc.cluster.local"
      port: {{ .Values.logsDatabase.port }}
      database: "{{ .Values.logsDatabase.name }}"
      username: "mongodb_username"
      password: "mongodb_password"
      params: "--authenticationDatabase admin"
    scheduler:
      cron: "{{ .Values.logsDatabase.cronSchedule }}"
      retention: {{ .Values.logsDatabase.retention }}
      timeout: {{ .Values.logsDatabase.timeout }}
    s3:
      api: "S3v4"
      url: "https://s3.amazonaws.com"
      bucket: "{{ .Values.logsDatabase.bucket }}"
      accessKey: "aws_access_key"
      secretKey: "aws_secret_key"
    smtp:
      server: {{ .Values.logsDatabase.smtp.server }}
      port: {{ .Values.logsDatabase.smtp.port }}
      emailSendRetries: {{ .Values.logsDatabase.smtp.emailSendRetries }}
      emailSendRetryDelay: {{ .Values.logsDatabase.smtp.emailSendRetryDelay }}
      emailSendDelayUnit: {{ .Values.logsDatabase.smtp.emailSendDelayUnit }}
      username: "smtp_username"
      password: "smtp_password"
      from: "smtp_username"
      to:
      {{- range .Values.logsDatabase.smtp.to }}
        - {{ . | quote }}
      {{- end }}
      warnOnly: {{ .Values.logsDatabase.smtp.warnOnly }}
      tlsEnabled: {{ .Values.logsDatabase.smtp.tlsEnabled }}
      encryptionType: {{ .Values.logsDatabase.smtp.encryptionType }}
    retry:
      attempts: {{ .Values.logsDatabase.retry.attempts }}
      backoffFactor: {{ .Values.logsDatabase.retry.backoffFactor }}
  {{ .Values.mainDatabase.name }}.yml: |
    target:
      host: "{{ .Release.Name }}-mongodb-0.{{ .Release.Name }}-mongodb-headless.{{ .Values.global.namespace }}.svc.cluster.local,{{ .Release.Name }}-mongodb-1.{{ .Release.Name }}-mongodb-headless.{{ .Values.global.namespace }}.svc.cluster.local,{{ .Release.Name }}-mongodb-2.{{ .Release.Name }}-mongodb-headless.{{ .Values.global.namespace }}.svc.cluster.local"
      port: {{ .Values.mainDatabase.port }}
      database: "{{ .Values.mainDatabase.name }}"
      username: "mongodb_username"
      password: "mongodb_password"
      params: "--authenticationDatabase admin"
    scheduler:
      cron: "{{ .Values.mainDatabase.cronSchedule }}"
      retention: {{ .Values.mainDatabase.retention }}
      timeout: {{ .Values.mainDatabase.timeout }}
    s3:
      api: "S3v4"
      url: "https://s3.amazonaws.com"
      bucket: "{{ .Values.mainDatabase.bucket }}"
      accessKey: "aws_access_key"
      secretKey: "aws_secret_key"
    smtp:
      server: {{ .Values.mainDatabase.smtp.server }}
      port: {{ .Values.mainDatabase.smtp.port }}
      emailSendRetries: {{ .Values.mainDatabase.smtp.emailSendRetries }}
      emailSendRetryDelay: {{ .Values.mainDatabase.smtp.emailSendRetryDelay }}
      emailSendDelayUnit: {{ .Values.mainDatabase.smtp.emailSendDelayUnit }}
      username: "smtp_username"
      password: "smtp_password"
      from: "smtp_username"
      to:
      {{- range .Values.mainDatabase.smtp.to }}
        - {{ . | quote }}
      {{- end }}
      warnOnly: {{ .Values.mainDatabase.smtp.warnOnly }}
      tlsEnabled: {{ .Values.mainDatabase.smtp.tlsEnabled }}
      encryptionType: {{ .Values.mainDatabase.smtp.encryptionType }}
    retry:
      attempts: {{ .Values.mainDatabase.retry.attempts }}
      backoffFactor: {{ .Values.mainDatabase.retry.backoffFactor }}
---
apiVersion: v1
kind: Service
metadata:
  name: mgob
  namespace: {{ .Values.global.namespace }}
  labels:
    chartVersion: {{ .Chart.Version }}
    name: mgob
spec:
  ports:
  - port: {{ .Values.containerPort }}
    targetPort: {{ .Values.containerPort }}
  clusterIP: None
  selector:
    role: mongo-backup
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mgob
  namespace: {{ .Values.global.namespace }}
  labels:
    chartVersion: {{ .Chart.Version }}
spec:
  serviceName: "mgob"
  replicas: 1
  selector:
    matchLabels:
      role: mongo-backup
  template:
    metadata:
      labels:
        role: mongo-backup
    spec:
      imagePullSecrets:
      - name: {{ .Values.global.project_name }}-dockerhub-registry-key
      containers:
      - name: mgobd
        image: {{ .Values.global.repository }}/{{ .Values.image }}:{{ .Values.tag }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.containerPort }}
          protocol: TCP
        volumeMounts:
        - name: mgob-storage
          mountPath: /storage
        - name: mgob-data
          mountPath: /data
        - name: mgob-data
          mountPath: /tmp
        - name: mgob-gstore-config
          mountPath: /config/{{ .Values.logsDatabase.name }}.yml
          subPath: {{ .Values.logsDatabase.name }}.yml
        - name: mgob-gstore-config
          mountPath: /config/{{ .Values.mainDatabase.name }}.yml
          subPath: {{ .Values.mainDatabase.name }}.yml
        env:
        - name: mongodb_username
          valueFrom:
            secretKeyRef:
              name: mgob-secrets
              key: mongodb_username
        - name: mongodb_password
          valueFrom:
            secretKeyRef:
              name: mgob-secrets
              key: mongodb_password
        - name: smtp_username
          valueFrom:
            secretKeyRef:
              name: mgob-secrets
              key: smtp_username
        - name: smtp_password
          valueFrom:
            secretKeyRef:
              name: mgob-secrets
              key: smtp_password
        - name: aws_access_key
          valueFrom:
            secretKeyRef:
              name: mgob-secrets
              key: aws_access_key
        - name: aws_secret_key
          valueFrom:
            secretKeyRef:
              name: mgob-secrets
              key: aws_secret_key
        - name: env_name
          valueFrom:
            secretKeyRef:
              name: mgob-secrets
              key: env_name
      volumes:
      - name: mgob-gstore-config
        configMap:
          name: mgob-gstore-config
          items:
          - key: {{ .Values.logsDatabase.name }}.yml
            path: {{ .Values.logsDatabase.name }}.yml
          - key: {{ .Values.mainDatabase.name }}.yml
            path: {{ .Values.mainDatabase.name }}.yml
  volumeClaimTemplates:
  - metadata:
      name: mgob-storage
    spec:
      accessModes: ["{{ .Values.volumeClaims.mgobData.requests.accessMode }}"]
      storageClassName: "{{ .Values.volumeClaims.mgobData.requests.storageClassName }}"
      resources:
        requests:
          storage: {{ .Values.volumeClaims.mgobData.requests.storage }}
  - metadata:
      name: mgob-data
    spec:
      accessModes: ["{{ .Values.volumeClaims.mgobData.requests.accessMode }}"]
      storageClassName: "{{ .Values.volumeClaims.mgobStorage.requests.storageClassName }}"
      resources:
        requests:
          storage: {{ .Values.volumeClaims.mgobStorage.requests.storage }}
